// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  name      String
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  submissions Submission[]
  adminComments AdminComment[]
  passwordResetTokens PasswordResetToken[]
}

model Submission {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  submissionNumber Int
  name             String
  nickname         String
  telegramContact  String
  category         String   // solo, duo/trio, team, unformat
  songName         String
  songMinutes      Int
  songSeconds      Int
  youtubeLink      String   // Required YouTube link
  hasBackdancers   Boolean  @default(false)
  backdancersTiming String? // Duration of backdancers performance (MM:SS format)
  participants     String[] // Array of participant names
  participantSubmissionNumbers Int[] // Array of submission numbers for each participant
  participantSubmissionsInfo String[] // Array of submissions info for each participant
  participantBirthDates String[] // Array of birth dates for each participant
  participantTelegramUsernames String[] // Array of telegram usernames for each participant
  hasProps         Boolean  @default(false)
  propsComment     String?  // Description of props used in performance
  usingBackground  Boolean  @default(false)
  materialsSent    Boolean  @default(false)
  comment          String?
  status           String   @default("pending") // pending, payment, accepted, rejected
  level            String?  // pro, middle, new - set by organizers
  adminComments    AdminComment[]
  user             User     @relation(fields: [userId], references: [id])
  userId           String   @db.ObjectId
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model AdminComment {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  submission  Submission @relation(fields: [submissionId], references: [id])
  submissionId String    @db.ObjectId
  admin       User       @relation(fields: [adminId], references: [id])
  adminId     String     @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model PasswordResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
}
