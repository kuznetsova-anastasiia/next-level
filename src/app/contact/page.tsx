"use client";

import { useState } from "react";
import { useAuth } from "../contexts/AuthContext";
import styles from "./contact.module.scss";

export default function ContactPage() {
  const { user } = useAuth();
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState(false);
  const [error, setError] = useState("");

  const [formData, setFormData] = useState({
    name: user?.name || "",
    email: user?.email || "",
    subject: "",
    message: "",
  });

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError("");
    setSuccess(false);

    // Validate required fields
    if (
      !formData.name ||
      !formData.email ||
      !formData.subject ||
      !formData.message
    ) {
      setError("–í—Å—ñ –ø–æ–ª—è —î –æ–±–æ–≤&apos;—è–∑–∫–æ–≤–∏–º–∏");
      setLoading(false);
      return;
    }

    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(formData.email)) {
      setError("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π email –∞–¥—Ä–µ—Å");
      setLoading(false);
      return;
    }

    try {
      const response = await fetch("/api/contact", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formData),
      });

      const data = await response.json();

      if (response.ok) {
        setSuccess(true);
        setFormData({
          name: user?.name || "",
          email: user?.email || "",
          subject: "",
          message: "",
        });
      } else {
        setError(data.error || "–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è");
      }
    } catch {
      setError("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className={styles.container}>
      <div className={styles.content}>
        <h1 className={styles.title}>–ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏</h1>
        <p className={styles.description}>
          –ú–∞—î—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó? –ú–∏ –∑–∞–≤–∂–¥–∏ —Ä–∞–¥—ñ –ø–æ—á—É—Ç–∏ –≤—ñ–¥ –≤–∞—Å!
        </p>

        {success && (
          <div className={styles.success}>
            <h3>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!</h3>
            <p>–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫. –ú–∏ –≤—ñ–¥–ø–æ–≤—ñ–º–æ –≤–∞–º –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.</p>
          </div>
        )}

        {error && (
          <div className={styles.error}>
            <h3>–ü–æ–º–∏–ª–∫–∞</h3>
            <p>{error}</p>
          </div>
        )}

        <form onSubmit={handleSubmit} className={styles.form}>
          <div className={styles.inputGroup}>
            <label htmlFor="name">–Ü–º&apos;—è *</label>
            <input
              type="text"
              id="name"
              name="name"
              value={formData.name}
              onChange={handleInputChange}
              required
              className={styles.input}
              placeholder="–í–∞—à–µ —ñ–º'—è"
            />
          </div>

          <div className={styles.inputGroup}>
            <label htmlFor="email">Email *</label>
            <input
              type="email"
              id="email"
              name="email"
              value={formData.email}
              onChange={handleInputChange}
              required
              className={styles.input}
              placeholder="your@email.com"
            />
          </div>

          <div className={styles.inputGroup}>
            <label htmlFor="subject">–¢–µ–º–∞ *</label>
            <input
              type="text"
              id="subject"
              name="subject"
              value={formData.subject}
              onChange={handleInputChange}
              required
              className={styles.input}
              placeholder="–¢–µ–º–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
            />
          </div>

          <div className={styles.inputGroup}>
            <label htmlFor="message">–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è *</label>
            <textarea
              id="message"
              name="message"
              value={formData.message}
              onChange={handleInputChange}
              required
              rows={6}
              className={styles.textarea}
              placeholder="–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è..."
            />
          </div>

          <button
            type="submit"
            disabled={loading}
            className={styles.submitButton}
          >
            {loading ? "–ù–∞–¥—Å–∏–ª–∞—î–º–æ..." : "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"}
          </button>
        </form>

        <div className={styles.contactInfo}>
          <h3>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ —Å–ø–æ—Å–æ–±–∏ –∑–≤'—è–∑–∫—É</h3>
          <div className={styles.socialLinks}>
            <a
              href="https://www.instagram.com/next.level.party.ua/"
              target="_blank"
              rel="noopener noreferrer"
              className={styles.socialLink}
            >
              üì∑ Instagram
            </a>
            <a
              href="https://t.me/nextlevel_party"
              target="_blank"
              rel="noopener noreferrer"
              className={styles.socialLink}
            >
              ‚úàÔ∏è Telegram
            </a>
          </div>
        </div>
      </div>
    </div>
  );
}
